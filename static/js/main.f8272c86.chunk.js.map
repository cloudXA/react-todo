{"version":3,"sources":["components/TodoItem.js","components/Todo.js","components/layout/Header.js","components/AddTodo.js","components/pages/about.js","App.js","serviceWorker.js","index.js"],"names":["btnStyle","Component","background","color","border","padding","borderRadius","cursor","float","headerStyle","textAlign","linkStyle","textDecoration","Header","style","to","About","Fragment","App","state","todos","id","uuidv4","title","completed","markComplete","setState","map","todo","delTodo","filter","addTodo","newTodo","className","exact","path","render","props","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAgDMA,GA5CiBC,YA4CN,CACfC,WAAY,UACZC,MAAO,OACPC,OAAQ,OACRC,QAAS,UACTC,aAAc,MACdC,OAAQ,UACRC,MAAO,UClDWP,YCQpB,IAAMQ,EAAc,CAClBP,WAAY,OACZC,MAAO,OACPO,UAAW,SACXL,QAAS,QAGLM,EAAY,CAChBR,MAAO,OACPS,eAAgB,QAGHC,EAtBf,WACE,OACE,4BAAQC,MAAOL,GACb,wCACA,kBAAC,IAAD,CAAMK,MAAOH,EAAWI,GAAG,UAA3B,SAFF,KAGE,kBAAC,IAAD,CAAMD,MAAOH,EAAWI,GAAG,KAA3B,U,QCJuBd,YCOde,MATf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,qCACA,wE,QCsFSC,G,kNAjFbC,MAAQ,CACNC,MAAO,CACL,CACEC,GAAKC,cACLC,MAAO,qBACPC,WAAW,GAEb,CACEH,GAAKC,cACLC,MAAO,qBACPC,WAAW,GAEb,CACEH,GAAKC,cACLC,MAAO,oBACPC,WAAW,K,EAUjBC,aAAe,SAACJ,GACd,EAAKK,SAAS,CAAEN,MAAO,EAAKD,MAAMC,MAAMO,KAAI,SAAAC,GAI1C,OAHGA,EAAKP,KAAOA,IACbO,EAAKJ,WAAaI,EAAKJ,WAElBI,Q,EAKXC,QAAU,SAACR,GAET,EAAKK,SAAS,CAAEN,MAAM,YAAK,EAAKD,MAAMC,MAAMU,QAAO,SAAAF,GAAI,OAAIA,EAAKP,KAAOA,S,EAGzEU,QAAU,SAACR,GACT,IAAMS,EAAU,CACdX,GAAKC,cACLC,QACAC,WAAW,GAEb,EAAKE,SAAS,CAACN,MAAM,GAAD,mBAAM,EAAKD,MAAMC,OAAjB,CAAwBY,O,oGAI5C,OACE,kBAAC,IAAD,KACG,yBAAKC,UAAU,OACd,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,OAAQ,SAAAC,OAYlC,kBAAC,IAAD,CAAOF,KAAK,SAASG,UAAWtB,W,GApE1Bf,cCEEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f8272c86.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Todos from './Todo'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      background: '#f4f4f4',\r\n      padding: '10px',\r\n      borderBottom: '1px #cc dotted',\r\n      textDecoration: this.props.todo.completed ? \r\n      'line-through' : 'none'\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const { id, title, complete } = this.props.todo;\r\n    return (\r\n      <div style={ this.getStyle() }> \r\n        <p>\r\n          <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {' '}\r\n          { title }\r\n          <button \r\n            onClick={this.props.delTodo.bind(this, id)}\r\n            style={ btnStyle }\r\n          >\r\n            ✂\r\n          </button>\r\n            \r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// PropTypes \r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nconst itemStyle = {\r\n  backgroundColor: '#f4f4f4'\r\n}\r\n\r\nconst btnStyle = {\r\n  background: '#ff0000',\r\n  color: '#fff',\r\n  border: 'none',\r\n  padding: '5px 8px',\r\n  borderRadius: '50%',\r\n  cursor: 'pointer',\r\n  float: 'right'\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass Todos extends Component {\r\n\r\n  render() {\r\n    // 类似v-for todo相当于item\r\n    return this.props.todos.map((todo) => ( // 根据func创建新的数组\r\n      <TodoItem \r\n        key={todo.id} \r\n        todo={todo} \r\n        markComplete = {this.props.markComplete} \r\n        delTodo = {this.props.delTodo}\r\n      /> \r\n       // 触发父组件的markComplete\r\n    ))\r\n  }\r\n}\r\n\r\n// Todos组件： 中相当于vue的props, 需要的一个变量todos\r\n// PropTypes\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default Todos;","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\n//可以作为组件进行渲染\r\nfunction Header() {  \r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>TodoList</h1>\r\n      <Link style={linkStyle} to=\"/about\">about</Link> |\r\n      <Link style={linkStyle} to=\"/\">Home</Link>\r\n    </header>\r\n  )\r\n}\r\n\r\nconst headerStyle = {\r\n  background: '#333',\r\n  color: '#fff',\r\n  textAlign: 'center',\r\n  padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n  color: '#fff',\r\n  textDecoration: 'none'\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport class AddTodo extends Component {\r\n  state = {\r\n    title: '五花马，千金裘,呼儿将出换美酒'\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title); //触发自定义事件，并传递载荷\r\n    this.setState({ title: '' })\r\n  }\r\n\r\n  // onChange = (e) => this.setState({ title: e.target.value})  动态设置state1\r\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value})\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{display: 'flex '}}>\r\n        <input \r\n          type=\"text\" \r\n          name=\"title\" \r\n          style={{ flex: '10', padding: '5px' }}\r\n          placeholder=\"addTodo...\" \r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n        />\r\n        <input \r\n          type=\"submit\" \r\n          value=\"Submit\"\r\n          className=\"btn\"\r\n          style={{flext: '1' }}\r\n        />\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n  addTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react';\r\n\r\nfunction About() {\r\n  return (\r\n    <React.Fragment>\r\n      <h1>About</h1>\r\n      <p>This is the TodoList app version v1.0.0</p>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route} from 'react-router-dom'\r\nimport Todos from './components/Todo.js'\r\nimport Header from './components/layout/Header.js'\r\nimport AddTodo from './components/AddTodo.js'\r\nimport About from './components/pages/about'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todos: [\r\n      {\r\n        id:  uuidv4(),\r\n        title: 'take out the trash',\r\n        completed: true\r\n      },\r\n      {\r\n        id:  uuidv4(),\r\n        title: 'Dinner with myself',\r\n        completed: false \r\n      },\r\n      {\r\n        id:  uuidv4(),\r\n        title: 'Meeting with boss',\r\n        completed: false\r\n      }\r\n    ]\r\n  }\r\n\r\n  componentDidMount() {\r\n    // axios请求数据，完成后端数据渲染\r\n  }\r\n  \r\n  // Toggle complete \r\n  markComplete = (id) => {\r\n    this.setState({ todos: this.state.todos.map(todo => {\r\n      if(todo.id === id) {\r\n        todo.completed = !todo.completed\r\n      }\r\n      return todo;\r\n    })})\r\n  }\r\n\r\n  // delTodo\r\n  delTodo = (id) => {\r\n    // this.setState({ todos: this.state.todos.filter(todo => todo.id !== id)}) // 此也可\r\n    this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)]}) //使用剩余模式，将筛选出的数组元素全部取出\r\n  }\r\n\r\n  addTodo = (title) => {\r\n    const newTodo = {\r\n      id:  uuidv4(),\r\n      title,\r\n      completed: false\r\n    }\r\n    this.setState({todos: [...this.state.todos, newTodo] })\r\n  }\r\n\r\n  render() {  //作为组件的渲染入口\r\n    return (\r\n      <Router>\r\n         <div className=\"App\">\r\n          <div className=\"container\">\r\n            <Header />\r\n            <Route exact path=\"/home\" render={props => (\r\n              // 替换div\r\n              <React.Fragment> \r\n                <AddTodo addTodo={this.addTodo} />\r\n                <Todos \r\n                  todos={this.state.todos} \r\n                  markComplete={this.markComplete} \r\n                  delTodo = {this.delTodo}\r\n                />\r\n              </React.Fragment>\r\n            )} />\r\n\r\n            <Route path=\"/about\" component={About} /> \r\n            \r\n          </div>\r\n        </div>\r\n\r\n\r\n      </Router>\r\n     \r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}